name: IaC template

on:
  workflow_call:
    inputs:
      GH_ENVIRONMENT: # GitHub environment
        type: string
        default: sandbox
        required: true
      TERRAFORM_ACTION: # Terraform apply or destroy
        type: string
        default: apply
      APP_NAME:
        type: string
        required: true
      APP_PROJECT:
        type: string
        required: true
      APP_LOCATION:
        type: string
        required: true
      APP_REGION_SHORT:
        type: string
        required: true
      APP_SUFFIX:
        type: string
        required: true
      TAG_COUNTRY:
        type: string
        required: true
      TAG_ENVIRONMENT:
        type: string
        required: true
      TAG_MAINT_WINDOW:
        type: string
        required: true
      TAG_SECTOR:
        type: string
        required: true
      TAG_COST_CENTER:
        type: string
        required: true
      TAG_APP_OWNER:
        type: string
        required: true
      TAG_CLASSIFICATION:
        type: string
        required: true
      TAG_SERVICE_CLASS:
        type: string
        required: true
    
    # Secrets need to be passed from the calling workflow, because reusable workflows can't access secrets directly
    secrets:
      POLICY_ASSIGNMENT_NAME:
        required: true
      POLICY_DEFINITION_ID:
        required: true
      APP_ENVIRONMENT:
        required: true
      OWNER_OBJECT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      AZURE_CREDS:
        required: true
      GH_PAT: # GitHub PAT for accessing the modules repo via Terraform
        required: true

jobs:
# Create all base resources
  base-infra:
   name: ${{ inputs.TERRAFORM_ACTION }} base infra
   runs-on: ubuntu-latest
   environment: ${{ inputs.GH_ENVIRONMENT }}
   concurrency: # This prevents multiple concurrent deployments to the same environment
    group: ${{ inputs.GH_ENVIRONMENT }}
    cancel-in-progress: false
   defaults:
     run:
       working-directory: terraform/base
   env:
     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
   
   steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_wrapper: false

    # MAKE SURE YOU CHANGE THE ORG NAME!
    - name: Git setup
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://foo:${{ env.GH_TOKEN }}@github.com/iveylabs".insteadOf "https://github.com/iveylabs"
      env: # DID YOU CHANGE THE ORG NAME?
        GH_TOKEN: ${{ secrets.GH_PAT }} # ARE YOU SURE YOU CHANGED THE ORG NAME?
      # LAST CHANCE. CHANGE THE ORG NAME!
      
    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1.1
      with:
        files: '["terraform/base/main.tf", "terraform/base/variables.tfvars"]'
      env:
        APP_ENVIRONMENT: ${{ secrets.APP_ENVIRONMENT }}
        OWNER_OBJECT_ID: ${{ secrets.OWNER_OBJECT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        APP_PROJECT: ${{ inputs.APP_PROJECT }}
        APP_LOCATION: ${{ inputs.APP_LOCATION }}
        APP_REGION_SHORT: ${{ inputs.APP_REGION_SHORT }}
        APP_SUFFIX: ${{ inputs.APP_SUFFIX }}
        TAG_COUNTRY: ${{ inputs.TAG_COUNTRY }}
        TAG_ENVIRONMENT: ${{ inputs.TAG_ENVIRONMENT }}
        TAG_MAINT_WINDOW: ${{ inputs.TAG_MAINT_WINDOW }}
        TAG_SECTOR: ${{ inputs.TAG_SECTOR }}
        TAG_COST_CENTER: ${{ inputs.TAG_COST_CENTER }}
        TAG_APP_OWNER: ${{ inputs.TAG_APP_OWNER }}
        TAG_CLASSIFICATION: ${{ inputs.TAG_CLASSIFICATION }}
        TAG_SERVICE_CLASS: ${{ inputs.TAG_SERVICE_CLASS }}

    - name: Terraform init
      run: terraform init

    - name: Terraform plan
      run: terraform plan -out="tfplan.bin" -var-file="variables.tfvars" -input=false
      if: ${{ inputs.TERRAFORM_ACTION == 'apply' }}

    # Apply if that was the selected option
    - name: Terraform apply
      run: terraform apply -input=false -auto-approve "tfplan.bin"
      if: ${{ inputs.TERRAFORM_ACTION == 'apply' }}
      
    # Destroy if that was the selected option
    - name: Terraform destroy
      run: terraform destroy -input=false -auto-approve -var-file="variables.tfvars"
      if: ${{ inputs.TERRAFORM_ACTION == 'destroy' }}

  # Exclude from subscription/management group tagging policy
  policy-exclude:
    name: Azure policy exclusion
    needs: base-infra
    environment: ${{ inputs.GH_ENVIRONMENT }}
    runs-on: ubuntu-latest
    if: ${{ inputs.TERRAFORM_ACTION == 'apply' }}
    concurrency:
      group: ${{ inputs.GH_ENVIRONMENT }}
      cancel-in-progress: false
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDS }}
          enable-AzPSSession: true

      - name: Exclude RG from sub tagging policy
        uses: Azure/powershell@v1
        with:
          inlineScript: |
            # Get current notScopes list
            $currentNotScopes = (Get-AzPolicyAssignment -Name "${{ secrets.POLICY_ASSIGNMENT_NAME }}").Properties.NotScopes
            # Add new RG to NotScopes of assignment, if not already excluded
            if(!$currentNotScopes.Contains("/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/RG-${{ secrets.APP_ENVIRONMENT }}-${{ inputs.APP_PROJECT }}-${{ inputs.APP_REGION_SHORT }}-${{ inputs.APP_NAME }}-${{ inputs.APP_SUFFIX }}")) {
              $newNotScopes = $currentNotScopes + "/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/RG-${{ secrets.APP_ENVIRONMENT }}-${{ inputs.APP_PROJECT }}-${{ inputs.APP_REGION_SHORT }}-${{ inputs.APP_NAME }}-${{ inputs.APP_SUFFIX }}"
              # Modify assignment with new NotScopes
              Set-AzPolicyAssignment -Name "${{ secrets.POLICY_ASSIGNMENT_NAME }}" -NotScope $newNotScopes
            }
            else {
              Write-Host "Resource group already excluded. No change required."
            }
          azPSVersion: latest

  # Create resource group level tagging policy
  rg-policy:
   name: Create RG policy assignment
   runs-on: ubuntu-latest
   needs: policy-exclude
   environment: ${{ inputs.GH_ENVIRONMENT }}
   if: ${{ inputs.TERRAFORM_ACTION == 'apply' }}
   concurrency:
    group: ${{ inputs.GH_ENVIRONMENT }}
    cancel-in-progress: false
   defaults:
     run:
       working-directory: terraform/policy
   env:
     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
   
   steps:    
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_wrapper: false

    # MAKE SURE YOU CHANGE THE ORG NAME!
    - name: Git setup
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://foo:${{ env.GH_TOKEN }}@github.com/iveylabs".insteadOf "https://github.com/iveylabs"
      env: # DID YOU CHANGE THE ORG NAME?
        GH_TOKEN: ${{ secrets.GH_PAT }} # ARE YOU SURE YOU CHANGED THE ORG NAME?
      # LAST CHANCE. CHANGE THE ORG NAME!
        
        
    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1.1
      with:
        files: '["terraform/policy/main.tf", "terraform/policy/variables.tfvars"]'
      env:
        APP_ENVIRONMENT: ${{ secrets.APP_ENVIRONMENT }}
        APP_NAME: ${{ inputs.APP_NAME }}
        APP_PROJECT: ${{ inputs.APP_PROJECT }}
        APP_LOCATION: ${{ inputs.APP_LOCATION }}
        APP_REGION_SHORT: ${{ inputs.APP_REGION_SHORT }}
        APP_SUFFIX: ${{ inputs.APP_SUFFIX }}
        TAG_COUNTRY: ${{ inputs.TAG_COUNTRY }}
        TAG_ENVIRONMENT: ${{ inputs.TAG_ENVIRONMENT }}
        TAG_MAINT_WINDOW: ${{ inputs.TAG_MAINT_WINDOW }}
        TAG_SECTOR: ${{ inputs.TAG_SECTOR }}
        TAG_COST_CENTER: ${{ inputs.TAG_COST_CENTER }}
        TAG_APP_OWNER: ${{ inputs.TAG_APP_OWNER }}
        TAG_CLASSIFICATION: ${{ inputs.TAG_CLASSIFICATION }}
        TAG_SERVICE_CLASS: ${{ inputs.TAG_SERVICE_CLASS }}
        
    - name: Terraform init
      run: terraform init

    - name: Terraform plan
      run: terraform plan -out="tfplan.bin" -var-file="variables.tfvars" -input=false

    # Apply if that was the selected option
    - name: Terraform apply
      run: terraform apply -input=false -auto-approve "tfplan.bin"
